name: Java CI with Gradle
on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: temurin

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.6.0
        with:
          arguments: build

      - name: Get JAR_FILE
        id: jarfile
        run: |
          JAR_FILE=$(ls build/libs/*.jar | head -n 1)
          echo "JAR_FILE_NAME=$JAR_FILE" >> $GITHUB_ENV
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: ${{ env.JAR_FILE_NAME }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: app
          path: build/libs/

      - name: Setup SSH Key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Copy JAR to EC2
        run: |
          JAR_FILE=$(ls build/libs/*.jar | head -n 1)
          scp -i private_key.pem \
            -o StrictHostKeyChecking=no \
            $JAR_FILE \
            ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }}:/home/${{ secrets.AWS_EC2_USER }}/

      - name: Restart Spring Application on EC2
        run: |
          JAR_FILE=$(basename $(ls build/libs/*.jar | head -n 1))
          echo "JAR_FILE to be used: $JAR_FILE" # Log the JAR_FILE value
          ssh -i private_key.pem \
            -o StrictHostKeyChecking=no \
            ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << EOF
            # 종료할 Java 프로세스를 찾고 종료
            PID=\$(pgrep -f "java -jar /home/${{ secrets.AWS_EC2_USER }}/")
            if [ -n "\$PID" ]; then
              echo "Killing existing Java process with PID: \$PID"
              kill \$PID
              sleep 5  # 프로세스가 종료되도록 잠시 대기
            else
              echo "No existing Java process found."
            fi

            # 기존 JAR 파일 삭제 (새로운 JAR 파일은 제외)
            echo "Deleting old JAR files except for the new one..."
            find /home/${{ secrets.AWS_EC2_USER }} -maxdepth 1 -type f -name "*.jar" ! -name "$JAR_FILE" -exec rm -f {} +

            # 새로운 JAR 파일 실행
            nohup java -jar /home/${{ secrets.AWS_EC2_USER }}/$JAR_FILE > /home/${{ secrets.AWS_EC2_USER }}/app.log 2>&1 &
          EOF

      - name: Cleanup
        run: rm -f private_key.pem
