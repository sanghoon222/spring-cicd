name: Java CI/CD with Gradle
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: temurin
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2.6.0
        with:
          arguments: build
      - name: Get JAR filename
        id: get-jar
        run: |
          # Find the JAR file in the build/libs directory and set it to the environment variable JAR_FILE
          JAR_FILE=$(ls build/libs/*.jar | head -n 1)
          echo "JAR_FILE=$JAR_FILE" >> $GITHUB_ENV
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          # Use the dynamically set environment variable JAR_FILE
          name: app
          path: ${{ env.JAR_FILE }}
          
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: app
          path: build/libs/
      - name: Setup SSH Key
        run: |
          echo "${{ secrets.AWS_EC2_KEY }}" > private_key.pem
          chmod 600 private_key.pem
      - name: Copy JAR to EC2
        run: |
          scp -i private_key.pem \
            -o StrictHostKeyChecking=no \
            # Use the dynamically set environment variable JAR_FILE
            ${{ env.JAR_FILE }} \
            ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }}:/home/${{ secrets.AWS_EC2_USER }}/
      - name: Restart Spring Application on EC2
        run: |
          ssh -i private_key.pem \
            -o StrictHostKeyChecking=no \
            ${{ secrets.AWS_EC2_USER }}@${{ secrets.AWS_EC2_HOST }} << 'EOF'
            pgrep java | xargs kill -9
            # Use the dynamically set environment variable JAR_FILE
            nohup java -jar /home/${{ secrets.AWS_EC2_USER }}/$(basename ${{ env.JAR_FILE }}) > app.log 2>&1 &
          EOF
      - name: Cleanup
        run: rm -f private_key.pem
